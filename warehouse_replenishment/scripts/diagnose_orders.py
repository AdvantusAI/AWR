import logging
from sqlalchemy import text
from warehouse_replenishment.db import session_scope
from warehouse_replenishment.logging_setup import get_logger

logger = get_logger('diagnose_orders')

def diagnose_orders():
    """Diagnose why orders aren't being generated by checking key metrics."""
    with session_scope() as session:
        # Query 1: Check demand data
        logger.info("Checking demand data...")
        demand_query = text("""
            SELECT 
                i.id as item_id,
                i.description,
                i.demand_4weekly,
                i.demand_weekly,
                i.demand_monthly,
                i.demand_yearly,
                i.madp
            FROM item i
            WHERE i.buyer_class IN ('R', 'W')
            ORDER BY i.id
        """)
        demand_results = session.execute(demand_query).fetchall()
        
        logger.info(f"Found {len(demand_results)} active items")
        for row in demand_results:
            logger.info(f"Item {row.item_id} ({row.description}):")
            logger.info(f"  Demand 4-weekly: {row.demand_4weekly}")
            logger.info(f"  Demand weekly: {row.demand_weekly}")
            logger.info(f"  Demand monthly: {row.demand_monthly}")
            logger.info(f"  Demand yearly: {row.demand_yearly}")
            logger.info(f"  MADP: {row.madp}")
        
        # Query 2: Check safety stock and order points
        logger.info("\nChecking safety stock and order points...")
        safety_stock_query = text("""
            SELECT 
                i.id as item_id,
                i.description,
                i.sstf,
                i.item_order_point_units,
                i.order_up_to_level_units,
                i.lead_time_forecast,
                i.lead_time_variance,
                i.madp,
                v.order_cycle
            FROM item i
            JOIN vendor v ON i.vendor_id = v.id
            WHERE i.buyer_class IN ('R', 'W')
            ORDER BY i.id
        """)
        safety_stock_results = session.execute(safety_stock_query).fetchall()
        
        for row in safety_stock_results:
            logger.info(f"Item {row.item_id} ({row.description}):")
            logger.info(f"  Safety Stock Time Factor: {row.sstf}")
            logger.info(f"  Item Order Point Units: {row.item_order_point_units}")
            logger.info(f"  Order Up To Level Units: {row.order_up_to_level_units}")
            logger.info(f"  Lead Time Forecast: {row.lead_time_forecast}")
            logger.info(f"  Lead Time Variance: {row.lead_time_variance}")
            logger.info(f"  MADP: {row.madp}")
            logger.info(f"  Vendor Order Cycle: {row.order_cycle}")
        
        # Query 3: Check current stock levels
        logger.info("\nChecking current stock levels...")
        stock_query = text("""
            SELECT 
                i.id as item_id,
                i.description,
                i.on_hand,
                i.on_order,
                i.customer_back_order,
                i.reserved,
                i.item_order_point_units,
                i.order_up_to_level_units
            FROM item i
            WHERE i.buyer_class IN ('R', 'W')
            ORDER BY i.id
        """)
        stock_results = session.execute(stock_query).fetchall()
        
        for row in stock_results:
            logger.info(f"Item {row.item_id} ({row.description}):")
            logger.info(f"  On Hand: {row.on_hand}")
            logger.info(f"  On Order: {row.on_order}")
            logger.info(f"  Customer Back Order: {row.customer_back_order}")
            logger.info(f"  Reserved: {row.reserved}")
            logger.info(f"  Item Order Point Units: {row.item_order_point_units}")
            logger.info(f"  Order Up To Level Units: {row.order_up_to_level_units}")
            
            # Calculate if item is at order point
            total_available = row.on_hand + row.on_order - row.reserved
            is_at_order_point = total_available < row.item_order_point_units
            logger.info(f"  Total Available: {total_available}")
            logger.info(f"  Is at Order Point: {is_at_order_point}")

if __name__ == "__main__":
    diagnose_orders() 